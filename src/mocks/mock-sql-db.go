// Code generated by MockGen. DO NOT EDIT.
// Source: doe/src/data (interfaces: SQLDb)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	data "doe/src/data"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSQLDb is a mock of SQLDb interface
type MockSQLDb struct {
	ctrl     *gomock.Controller
	recorder *MockSQLDbMockRecorder
}

// MockSQLDbMockRecorder is the mock recorder for MockSQLDb
type MockSQLDbMockRecorder struct {
	mock *MockSQLDb
}

// NewMockSQLDb creates a new mock instance
func NewMockSQLDb(ctrl *gomock.Controller) *MockSQLDb {
	mock := &MockSQLDb{ctrl: ctrl}
	mock.recorder = &MockSQLDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLDb) EXPECT() *MockSQLDbMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockSQLDb) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSQLDbMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLDb)(nil).Close))
}

// Exec mocks base method
func (m *MockSQLDb) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockSQLDbMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockSQLDb)(nil).Exec), varargs...)
}

// ExecContext mocks base method
func (m *MockSQLDb) ExecContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext
func (mr *MockSQLDbMockRecorder) ExecContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockSQLDb)(nil).ExecContext), varargs...)
}

// ExecuteTx mocks base method
func (m *MockSQLDb) ExecuteTx(arg0 context.Context, arg1 func(data.SQLTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTx indicates an expected call of ExecuteTx
func (mr *MockSQLDbMockRecorder) ExecuteTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTx", reflect.TypeOf((*MockSQLDb)(nil).ExecuteTx), arg0, arg1)
}

// Query mocks base method
func (m *MockSQLDb) Query(arg0 string, arg1 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockSQLDbMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockSQLDb)(nil).Query), varargs...)
}

// QueryContext mocks base method
func (m *MockSQLDb) QueryContext(arg0 context.Context, arg1 string, arg2 ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext
func (mr *MockSQLDbMockRecorder) QueryContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockSQLDb)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method
func (m *MockSQLDb) QueryRow(arg0 string, arg1 ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockSQLDbMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockSQLDb)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method
func (m *MockSQLDb) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext
func (mr *MockSQLDbMockRecorder) QueryRowContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockSQLDb)(nil).QueryRowContext), varargs...)
}
