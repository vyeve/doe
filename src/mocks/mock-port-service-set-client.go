// Code generated by MockGen. DO NOT EDIT.
// Source: doe/src/models (interfaces: PortService_SetClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "doe/src/models"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockPortService_SetClient is a mock of PortService_SetClient interface
type MockPortService_SetClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortService_SetClientMockRecorder
}

// MockPortService_SetClientMockRecorder is the mock recorder for MockPortService_SetClient
type MockPortService_SetClientMockRecorder struct {
	mock *MockPortService_SetClient
}

// NewMockPortService_SetClient creates a new mock instance
func NewMockPortService_SetClient(ctrl *gomock.Controller) *MockPortService_SetClient {
	mock := &MockPortService_SetClient{ctrl: ctrl}
	mock.recorder = &MockPortService_SetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortService_SetClient) EXPECT() *MockPortService_SetClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockPortService_SetClient) CloseAndRecv() (*models.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*models.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockPortService_SetClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPortService_SetClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockPortService_SetClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockPortService_SetClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPortService_SetClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockPortService_SetClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPortService_SetClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPortService_SetClient)(nil).Context))
}

// Header mocks base method
func (m *MockPortService_SetClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockPortService_SetClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPortService_SetClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockPortService_SetClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockPortService_SetClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPortService_SetClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockPortService_SetClient) Send(arg0 *models.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockPortService_SetClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPortService_SetClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockPortService_SetClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockPortService_SetClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPortService_SetClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockPortService_SetClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockPortService_SetClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPortService_SetClient)(nil).Trailer))
}
