// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	Set(ctx context.Context, opts ...grpc.CallOption) (PortService_SetClient, error)
	GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Ports, error)
	GetOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Port, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) Set(ctx context.Context, opts ...grpc.CallOption) (PortService_SetClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[0], "/models.PortService/Set", opts...)
	if err != nil {
		return nil, err
	}
	x := &portServiceSetClient{stream}
	return x, nil
}

type PortService_SetClient interface {
	Send(*Port) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type portServiceSetClient struct {
	grpc.ClientStream
}

func (x *portServiceSetClient) Send(m *Port) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portServiceSetClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portServiceClient) GetAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Ports, error) {
	out := new(Ports)
	err := c.cc.Invoke(ctx, "/models.PortService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Port, error) {
	out := new(Port)
	err := c.cc.Invoke(ctx, "/models.PortService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility
type PortServiceServer interface {
	Set(PortService_SetServer) error
	GetAll(context.Context, *Request) (*Ports, error)
	GetOne(context.Context, *Request) (*Port, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (UnimplementedPortServiceServer) Set(PortService_SetServer) error {
	return status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedPortServiceServer) GetAll(context.Context, *Request) (*Ports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPortServiceServer) GetOne(context.Context, *Request) (*Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_Set_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortServiceServer).Set(&portServiceSetServer{stream})
}

type PortService_SetServer interface {
	SendAndClose(*Empty) error
	Recv() (*Port, error)
	grpc.ServerStream
}

type portServiceSetServer struct {
	grpc.ServerStream
}

func (x *portServiceSetServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portServiceSetServer) Recv() (*Port, error) {
	m := new(Port)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PortService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.PortService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/models.PortService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetOne(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _PortService_GetAll_Handler,
		},
		{
			MethodName: "GetOne",
			Handler:    _PortService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Set",
			Handler:       _PortService_Set_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
