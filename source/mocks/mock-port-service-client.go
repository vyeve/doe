// Code generated by MockGen. DO NOT EDIT.
// Source: doe/source/models (interfaces: PortServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "doe/source/models"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockPortServiceClient is a mock of PortServiceClient interface
type MockPortServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceClientMockRecorder
}

// MockPortServiceClientMockRecorder is the mock recorder for MockPortServiceClient
type MockPortServiceClientMockRecorder struct {
	mock *MockPortServiceClient
}

// NewMockPortServiceClient creates a new mock instance
func NewMockPortServiceClient(ctrl *gomock.Controller) *MockPortServiceClient {
	mock := &MockPortServiceClient{ctrl: ctrl}
	mock.recorder = &MockPortServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortServiceClient) EXPECT() *MockPortServiceClientMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockPortServiceClient) GetAll(arg0 context.Context, arg1 *models.Request, arg2 ...grpc.CallOption) (*models.Ports, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*models.Ports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPortServiceClientMockRecorder) GetAll(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPortServiceClient)(nil).GetAll), varargs...)
}

// GetOne mocks base method
func (m *MockPortServiceClient) GetOne(arg0 context.Context, arg1 *models.Request, arg2 ...grpc.CallOption) (*models.Port, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOne", varargs...)
	ret0, _ := ret[0].(*models.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne
func (mr *MockPortServiceClientMockRecorder) GetOne(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockPortServiceClient)(nil).GetOne), varargs...)
}

// Set mocks base method
func (m *MockPortServiceClient) Set(arg0 context.Context, arg1 ...grpc.CallOption) (models.PortService_SetClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(models.PortService_SetClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockPortServiceClientMockRecorder) Set(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPortServiceClient)(nil).Set), varargs...)
}
